# Default values for Script Exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

## The number of Pods, which are created by the Deployment.
## See: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
##
replicaCount: 1

## Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the Script Exporter image from a
## private registry.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

## Set the image which should be used for Script Exporter.
##
image:
  repository: ghcr.io/ricoberger/script_exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

## Specify security settings for the created Pods. To set the security settings for the Script Exporter Container use
## the corresponding "securityContext" field.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext: {}
  # fsGroup: 2000

## Specify security settings for the Script Exporter Container. They override settings made at the Pod level via the
## "podSecurityContext" when there is overlap.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
## 'resources:'.
##
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
##
nodeSelector: {}

## Specify the tolerations for the Script Exporter Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
##
tolerations: []

## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the Script Exporter Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
## See: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
##
topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name=hub

## Specify additional volumes for the Script Exporter deployment.
## See: https://kubernetes.io/docs/concepts/storage/volumes/
##
volumes: []
  # - name: scripts
  #   configMap:
  #     name: scripts

## Specify additional volumeMounts for the Script Exporter container.
## See: https://kubernetes.io/docs/concepts/storage/volumes/
##
volumeMounts: []
  # - name: scripts
  #   mountPath: /script_exporter/scripts
  #   readOnly: true

## Specify additional arguments for the Script Exporter container.
##
args:
  - --config.files=/script_exporter/scripts/scripts.yaml

## Specify additional environment variables for the Script Exporter container.
##
env: []
  # - name: MY_ENV_VAR
  #   value: MY_ENV_VALUE

## Specify additional labels and annotations for the created Pods.
##
podAnnotations: {}
podLabels: {}

## Set the type for the created service: ClusterIP, NodePort, LoadBalancer.
## See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
##
service:
  type: ClusterIP

  annotations: {}
  labels: {}

serviceAccount:
  ## If true, a ServiceAccount is created.
  ##
  create: false
  ## The name of the ServiceAccount to use. This field is required if `create` is true.
  ##
  name: ""
  ## Specify annotations to add to the ServiceAccount.
  ##
  annotations: {}

## Create a Service Monitor for the Prometheus Operator.
## See: https://github.com/coreos/prometheus-operator
##
serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator for each target
  ##
  enabled: false

  ## Namespace for the ServiceMonitor. Fallback to the the release namespace.
  ##
  namespace: ""

  ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
  ##
  interval: ""

  ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
  ##
  scrapeTimeout: ""

  ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  ##
  labels: {}

  ## HonorLabels chooses the metric's labels on collisions with target labels.
  ##
  honorLabels: true

  ## MetricRelabelConfigs to apply to samples before ingestion.
  ##
  metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]

  ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
  ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
  ##
  relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace

  ## Automatically create a serviceMonitor for each script defined in the 'config' section below
  ## This option is mutaly exclusive with the following 'targets' list
  ##
  autoCreate:
    enabled: true

  targets: []
    # - name: example                    # Human readable URL that will appear in Prometheus / AlertManager
    #   script: ping                     # Name of the script to target.
    #   labels: {}                       # Map of labels for ServiceMonitor. Overrides value set in `defaults`
    #   interval: 60s                    # Scraping interval. Overrides value set in `defaults`
    #   scrapeTimeout: 60s               # Scrape timeout. Overrides value set in `defaults`
    #   additionalMetricsRelabels: []    # List of metric relabeling actions to run
    #   additionalRelabeling: []         # List of relabeling actions to run

## Create a Service Monitor for the Prometheus Operator.
## See: https://github.com/coreos/prometheus-operator
##
selfServiceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator for each target
  ##
  enabled: false

  ## Namespace for the ServiceMonitor. Fallback to the the release namespace.
  ##
  namespace: ""

  ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
  ##
  interval: ""

  ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
  ##
  scrapeTimeout: ""

  ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  ##
  labels: {}

  ## HonorLabels chooses the metric's labels on collisions with target labels.
  ##
  honorLabels: true

  ## MetricRelabelConfigs to apply to samples before ingestion.
  ##
  metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]

  ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
  ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
  ##
  relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace

## The configuration for the Script Exporter as shown in
## https://github.com/ricoberger/script_exporter/tree/main#usage-and-configuration
##
config: |
  scripts:
    - name: example
      command:
        - /script_exporter/scripts/example.sh

## A list of scripts which should be added to the container. It is also possible to add some scripts to the container,
## via the "volumes" and "volumeMounts" values.
##
scripts:
  example.sh: |
    #!/usr/bin/env bash

    echo '# HELP custom_metric A custom metric exported by the script'
    echo '# TYPE custom_metric gauge'
    echo 'custom_metric{script="example"} 1'
