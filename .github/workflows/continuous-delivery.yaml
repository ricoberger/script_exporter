---
name: Continuous Delivery

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published

jobs:
  binaries:
    name: Binaries
    runs-on: ubuntu-latest
    if:
      github.event_name == 'pull_request' || (github.event_name == 'release' &&
      github.event.action == 'published')
    strategy:
      matrix:
        platform:
          [
            { os: "darwin", arch: "amd64" },
            { os: "darwin", arch: "arm64" },
            { os: "linux", arch: "amd64" },
            { os: "linux", arch: "arm64" },
            { os: "windows", arch: "amd64" },
            { os: "windows", arch: "arm64" },
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Install Dependencies
        run: |
          go mod download

      - name: Build
        run: |
          make build
          cp bin/script_exporter script_exporter
          tar -czf script_exporter-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.tar.gz script_exporter

      - name: Upload Artifact (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name:
            script_exporter-${{ matrix.platform.os }}-${{ matrix.platform.arch
            }}.tar.gz
          path:
            script_exporter-${{ matrix.platform.os }}-${{ matrix.platform.arch
            }}.tar.gz
          if-no-files-found: error

      - name: Upload Artifact (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if:
          ${{ github.event_name == 'release' && github.event.action ==
          'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path:
            script_exporter-${{ matrix.platform.os }}-${{ matrix.platform.arch
            }}.tar.gz

  docker:
    name: Docker
    runs-on: ubuntu-latest
    if:
      github.ref == 'refs/heads/main' || (github.event_name == 'release' &&
      github.event.action == 'published')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker Metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{raw}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  helm:
    name: Helm
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint
        run: |
          helm lint ./charts/script-exporter

      - name: Template
        run: |
          helm template ./charts/script-exporter

      - name: Set Version
        id: version
        run: |
          echo VERSION=$(yq -r .version ./charts/script-exporter/Chart.yaml) >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Package and Push Helm Chart
        run: |
          helm package ./charts/script-exporter --version ${{ env.VERSION }}
          helm push ./script-exporter-${{ env.VERSION }}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
